#+TITLE: Emacs Configuration
#+AUTHOR: Clement NICOLAS
#+EMAIL: niccle27@gmail.com

* Table of Contents :TOC:
- [[#acknowledgement][Acknowledgement]]
  - [[#noteworthy-configurations][Noteworthy configurations]]
- [[#before-startup][Before Startup]]
  - [[#refresh-packages][Refresh packages]]
  - [[#define-repos][Define repos]]
  - [[#install-use-package][Install use-package]]
- [[#general][General]]
  - [[#better-defaults][Better defaults]]
  - [[#navigation][Navigation]]
  - [[#edition][Edition]]
  - [[#customization][Customization]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#lsp][LSP]]
  - [[#typing][Typing]]
  - [[#interface-enhancement][Interface Enhancement]]
  - [[#projects][Projects]]
  - [[#file-manager][File Manager]]
  - [[#general-programming-settings][General programming settings]]
  - [[#specific-mode-settings][Specific mode settings]]
  - [[#web-mode][Web-mode]]
  - [[#linters][Linters]]
  - [[#snippets][Snippets]]
- [[#org-mode][Org-Mode]]
  - [[#org-mode-appearance][Org-Mode appearance]]
  - [[#to-refile][To refile]]
- [[#advanced-configurations][Advanced configurations]]
  - [[#alert][Alert]]
  - [[#auto-completion][Auto-Completion]]
  - [[#external-launch][External Launch]]
  - [[#buffer][Buffer]]
  - [[#calculator][Calculator]]
  - [[#dashboard][Dashboard]]
  - [[#dired][Dired]]
  - [[#history][History]]
  - [[#hydra][Hydra]]
  - [[#draw-graphics][Draw graphics]]
  - [[#try][Try]]
  - [[#undo-tree][Undo-tree]]
  - [[#wiki-summary][Wiki-summary]]
  - [[#irc][IRC]]
  - [[#recent-files][Recent Files]]
  - [[#revealjs][Reveal.js]]
  - [[#utility-functions][Utility functions]]

* Acknowledgement
  My configuration is mainly based on many other peoples configuration. Thank
  you all for your work !

** Noteworthy configurations
[[https://github.com/abrochard/emacs-config][Adrien Brochard]] (=abrochard=)
[[https://github.com/rememberYou/.emacs.d][Terencio Agozzino]] (=rememberYou=)
* Before Startup
** Refresh packages
   #+begin_src emacs-lisp :tangle yes
     ;; (package-refresh-contents)
   #+end_src

** Define repos
  First i define the repos from where to download packages.
#+begin_src emacs-lisp :tangle yes
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
#+end_src
** Install use-package
 If use-package isn't already installed, refresh contents and then install it so
 that the rest of the configuration is easier to maintain.

#+begin_src emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  ;; (use-package delight :ensure t)
  (use-package use-package-ensure-system-package :ensure t)
#+end_src
* General
** Better defaults
*** Variables
For a better user experience of GNU Emacs, here are the default values I use.

#+begin_src emacs-lisp :tangle yes
  (setq-default
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   display-time-default-load-average nil            ; Don't display load average
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode nil                             ; Prefers spaces over tabs
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   kill-ring-max 128                                ; Maximum length of kill ring
   load-prefer-newer t                              ; Prefers the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   tab-width 4                                      ; Set width for tabs
   use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
   user-full-name "NICOLAS Clement"                 ; Set the full name of the current user
   user-mail-address "niccle27@gmail.com"           ; Set the email address of the current user
   vc-follow-symlinks t                             ; Always follow the symlinks
   view-read-only t)                                ; Always open read-only buffers in view-mode
  (cd "~/")                                         ; Move to the user directory
  (column-number-mode 1)                            ; Show the column number
  (set-fill-column 80)
  (display-time-mode 0)                             ; Enable time in the mode-line
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show the parent
  (global-display-line-numbers-mode)                ; Always display lines number
  (blink-cursor-mode 0)                             ; Disable Cursor Blinking
  (server-start)                                    ; Start emacs Server
  (set-face-attribute 'default nil :height 140)     ; Set fonts size
  (global-hl-line-mode)                             ; Hightlight current line
  (when window-system
    (menu-bar-mode 1)                               ; Disable the menu bar
    (scroll-bar-mode 1)                             ; Enable the scroll bar
    (tool-bar-mode -1)                              ; Disable the tool bar
    (tooltip-mode 1))                               ; Enable tooltips
  (delete-selection-mode 1)                         ; Enable de deletion of selected text
  (toggle-frame-maximized)                          ; Toggle fullscreen by default
  (setq visible-bell 1)                             ; Disable the bell on Windows
  (setq save-silently 1)                            ; Disable minibuffer messageon saving
#+end_src

#+RESULTS:
: 1

*** Keybindings
#+begin_src emacs-lisp :tangle yes
  (defun backward-paragraph-bracket()
    (interactive)
    (backward-paragraph))
  (defun forward-paragraph-bracket()
    (interactive)
    (forward-paragraph))
  (global-set-key (kbd "M-[") 'backward-paragraph-bracket)
  (global-set-key (kbd "M-]") 'forward-paragraph-bracket)
#+end_src

#+RESULTS:
: forward-paragraph-bracket

** Navigation
*** Caps Lock
#+begin_src emacs-lisp :tangle yes
  (use-package caps-lock
    :bind(("þ" . caps-lock-mode)))
#+end_src

*** Half scroll
#+begin_src emacs-lisp :tangle yes
  (defun window-half-height ()
    (max 1 (/ (1- (window-height (selected-window))) 2)))

  (defun scroll-up-half ()
    (interactive)
    (scroll-up (window-half-height)))

  (defun scroll-down-half ()
    (interactive)
    (scroll-down (window-half-height)))

  (global-set-key (kbd "C-v") 'scroll-up-half)
  (global-set-key (kbd "M-v") 'scroll-down-half)
#+end_src

#+RESULTS:
: scroll-down-half

*** Move-text
#+begin_src emacs-lisp :tangle yes
  (use-package move-text
    :bind (("M-p" . move-text-up)
	   ("M-n" . move-text-down))
    :config (move-text-default-bindings))
#+end_src

*** Avy
#+begin_src emacs-lisp :tangle yes
  (use-package avy
    :ensure t
    :bind (("M-é" . avy-goto-char))
    :config
    (setq avy-background t))
#+end_src

#+RESULTS:
: avy-goto-char

*** Matching parentheses
#+begin_src emacs-lisp :tangle yes
  (defun goto-match-paren (arg)
    "Go to the matching parenthesis if on parenthesis, otherwise insert %.
  vi style of % jumping to matching brace."
    (interactive "p")
    (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
          ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
          (t (self-insert-command (or arg 1)))))

  (global-set-key (kbd "M-ù") 'goto-match-paren)
#+end_src

#+RESULTS:
: goto-match-paren

*** Smart move to beginning of the line

Navigation is an important part of productivity. The next function is a more
efficient way to go to the beginning of a line with =move-beginning-of-line=
(=C-a=) and =back-to-indentation= (=M-m=).

*FROM:*
http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/

#+begin_src emacs-lisp :tangle yes
  (defun my/smarter-move-beginning-of-line (arg)
    "Moves point back to indentation of beginning of line.

     Move point to the first non-whitespace character on this line.
     If point is already there, move to the beginning of the line.
     Effectively toggle between the first non-whitespace character and
     the beginning of the line.

     If ARG is not nil or 1, move forward ARG - 1 lines first. If
     point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  (global-set-key (kbd "C-a") 'my/smarter-move-beginning-of-line)

#+end_src
*** Imenu
Imenu produces menus for accessing locations in documents.
Currently not working
#+begin_src emacs-lisp :tangle yes
(use-package imenu
    :ensure nil
    :bind ("C-R" . imenu))
#+end_src
*** Split windows
Put the focus on the newly created frame
#+begin_src emacs-lisp :tangle yes
  (use-package window
    :ensure nil
    :bind (("C-x 3" . hsplit-last-buffer)
           ("C-x 2" . vsplit-last-buffer))
    :preface
    (defun hsplit-last-buffer ()
      "Gives the focus to the last created horizontal window."
      (interactive)
      (split-window-horizontally)
      (other-window 1))

    (defun vsplit-last-buffer ()
      "Gives the focus to the last created vertical window."
      (interactive)
      (split-window-vertically)
      (other-window 1)))
#+end_src

*** Windmove
#+begin_src emacs-lisp :tangle yes
  (use-package windmove
    :bind (("C-c h" . windmove-left)
           ("C-c j" . windmove-down)
           ("C-c k" . windmove-up)
           ("C-c l" . windmove-right)))
#+end_src
*** Winner
This package allow you to keep an history of windows so that you can roll back
C-c left : undo
C-c right : redo
#+begin_src emacs-lisp :tangle yes
  (use-package winner
    :defer 2
    :config (winner-mode 1))
#+end_src
** Edition
*** Improve built in functions
**** Kill Word
#+begin_src emacs-lisp :tangle yes
  (defun daedreth/kill-inner-word ()
    "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
    (interactive)
    (forward-char 1)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c cw") 'daedreth/kill-inner-word)
#+end_src
**** Copy Word
#+begin_src emacs-lisp :tangle yes
(defun daedreth/copy-whole-word ()
  (interactive)
  (save-excursion
    (forward-char 1)
    (backward-word)
    (kill-word 1)
    (yank)))
(global-set-key (kbd "C-c yw") 'daedreth/copy-whole-word)
#+end_src
**** Copy a line
#+begin_src emacs-lisp :tangle yes
  (defun copy-line (arg)
    "Copy lines (as many as prefix argument) in the kill ring"
    (interactive "p")
    (kill-ring-save (line-beginning-position)
                    (line-beginning-position (+ 1 arg)))
    (message "%d line%s copied" arg (if (= 1 arg) "" "s"))
    (beginning-of-line))
  (global-set-key (kbd "C-c yy") 'copy-line)
#+end_src

**** ci Vim equivalent
#+begin_src emacs-lisp :tangle yes
  (defun seek-backward-to-char (chr)
    "Seek backwards to a character"
    (interactive "cSeek back to char: ")
    (while (not (= (char-after) chr))
      (forward-char -1)))


  (defun delete-between-pair (char)
    "Delete in between the given pair"
    (interactive "cDelete between char: ")
    (seek-backward-to-char char)
    (forward-char 1)
    (zap-to-char 1 char)
    (insert char)
    (forward-char -1))

  (global-set-key (kbd "C-c ci") 'delete-between-pair)
#+end_src
**** Kill line
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-c dd") 'kill-whole-line)
#+end_src

**** Kill all scratch buffer
#+begin_src emacs-lisp :tangle yes
  (defun kill-all-random-scratch-buffer()
    (interactive)
    (kill-matching-buffers "^scratch-" t t))

  (global-set-key (kbd "H-k s") 'kill-all-random-scratch-buffer)
#+end_src
**** forward WORD (like vi)
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "M-F") 'forward-whitespace)
#+end_src
*** Iedit
[[https://github.com/victorhge/iedit][Iedit]]
Edit multiple regions in the same way simultaneously

#+begin_src emacs-lisp :tangle yes
  (use-package iedit
    :ensure t
  :bind (("M-e" . iedit-mode)))
#+end_src

*** Expand-region
#+begin_src emacs-lisp :tangle yes
  (use-package expand-region
    :bind (("C-+" . er/contract-region)
           ("C-=" . er/expand-region)))
#+end_src

*** atomic-chrome
#+begin_src emacs-lisp :tangle yes
(use-package atomic-chrome
:ensure t
:config (atomic-chrome-start-server))
(setq atomic-chrome-buffer-open-style 'frame)
#+end_src
*** Sudo-edit
#+begin_src emacs-lisp :tangle yes
  (use-package sudo-edit
    :ensure t
    :bind
    ("C-c su" . sudo-edit))
#+end_src

** Customization
*** Change custom file location
In order to keep the init.el file clean,we specify an other file which should be include as well for storing customization information.

#+begin_src emacs-lisp :tangle yes
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file)
    (load custom-file t))
#+end_src

#+RESULTS:
: t
*** Modeline

#+begin_src emacs-lisp :tangle no
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      (setq spaceline-buffer-encoding-abbrev-p nil)
      (setq spaceline-line-column-p nil)
      (setq spaceline-line-p nil)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme))
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp :tangle yes
(use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))
#+end_src

#+RESULTS:
| doom-modeline-mode | #[0 \300 \207 [dashboard-insert-startupify-lists] 1] | global-company-mode | ivy-mode | x-wm-set-size-hint | magit-auto-revert-mode--init-kludge | magit-startup-asserts | magit-version | forge-startup-asserts | table--make-cell-map |

*** Auto-revert
#+begin_src emacs-lisp :tangle yes
  (use-package autorevert
    :ensure nil
    :bind ("C-x R" . revert-buffer)
    :custom (auto-revert-verbose nil)
    :config (global-auto-revert-mode 1))
#+end_src

*** Parentheses
**** Color matching parentheses
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :config
   (custom-set-faces
    '(rainbow-delimiters-depth-0-face ((t (:foreground "saddle brown"))))
    '(rainbow-delimiters-depth-1-face ((t (:foreground "dark orange"))))
    '(rainbow-delimiters-depth-2-face ((t (:foreground "deep pink"))))
    '(rainbow-delimiters-depth-3-face ((t (:foreground "chartreuse"))))
    '(rainbow-delimiters-depth-4-face ((t (:foreground "deep sky blue"))))
    '(rainbow-delimiters-depth-5-face ((t (:foreground "yellow"))))
    '(rainbow-delimiters-depth-6-face ((t (:foreground "orchid"))))
    '(rainbow-delimiters-depth-7-face ((t (:foreground "spring green"))))
    '(rainbow-delimiters-depth-8-face ((t (:foreground "sienna1"))))
    '(rainbow-delimiters-unmatched-face ((t (:foreground "black"))))))
#+end_src

**** Smart parentheses
#+begin_src emacs-lisp :tangle yes
  (use-package smartparens
    :defer 1
    :custom (sp-escape-quotes-after-insert nil)
    :config (smartparens-global-mode 1)
    :bind("C-c spd" . sp-splice-sexp))
#+end_src

#+RESULTS:
: sp-splice-sexp

** Fonts
In order to use your favorite font.

#+begin_src emacs-lisp :tangle yes
  (set-face-attribute 'default nil :font "Source Code Pro")
  (set-fontset-font t 'latin "Noto Sans")
#+end_src

** Theme
I decided to go for the dracula theme because it's contrasted enough, but i
might change shortly

#+begin_src emacs-lisp :tangle yes
(use-package dracula-theme
  :config (load-theme 'dracula t)
  (set-face-background 'mode-line "#510370")
  (set-face-background 'mode-line-inactive "#212020"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(require 'color)
(if (display-graphic-p)
    (set-face-attribute 'org-block nil :background
                        (color-darken-name
                         (face-attribute 'default :background) 10)))
#+end_src

*** Icons
#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons :defer 0.5)
#+end_src

** TODO LSP
Emacs is sometimes quite tricky to set up. In order to get some nice IDE features, i decided to go for an LSP client-server model.

*** Setup LSP
#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode
    :hook (prog-mode . lsp))

  (use-package lsp-ui)
  (use-package company-lsp)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+end_src
*** C/C++
#+begin_src emacs-lisp :tangle yes
  (use-package ccls
    :after projectile
    :ensure-system-package ccls
    :custom
    (ccls-args nil)
    (ccls-executable (executable-find "ccls"))
    (projectile-project-root-files-top-down-recurring
     (append '("compile_commands.json" ".ccls")
             projectile-project-root-files-top-down-recurring))
    :config (push ".ccls-cache" projectile-globally-ignored-directories))
#+end_src

#+RESULTS:
: t

** Typing
*** TODO Abbrev
    When taking some notes, abbreviation can save you some time.
#+begin_src emacs-lisp :tangle yes
  ;; (use-package abbrev
  ;;   :hook (text-mode . abbrev-mode)
  ;;   :config
  ;;   (load "~/.emacs.d/lisp/my-abbrev.el"))
#+end_src

#+RESULTS:
| flyspell-mode | abbrev-mode | my-turn-spell-checking-on | text-mode-hook-identify |

*** Spelling

**** Flyspell
Flyspell provides on-the-fly checking and highlighting of misspellings.
     #+begin_src emacs-lisp :tangle yes
       (use-package flyspell
	 :hook ((markdown-mode org-mode text-mode) . flyspell-mode)
		(prog-mode . flyspell-prog-mode)
	 :custom
	 (flyspell-abbrev-p t)
	 (flyspell-default-dictionary "en_US")
	 (flyspell-issue-message-flag nil)
	 (flyspell-issue-welcome-flag nil))

       ;; (use-package flyspell-correct-ivy
       ;;   :after (flyspell ivy)
       ;;   :init (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+end_src

**** Ispell
Handles spell-checking and correction.
Ensure to install the hunspell before using the package.
#+begin_src emacs-lisp :tangle yes
  (use-package ispell
  :defer 2
  :ensure-system-package (hunspell . "trizen -S hunspell")
  :custom
  (ispell-dictionary "en_US")
  (ispell-dictionary-alist
   '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
     ("fr_BE" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "fr_BE") nil utf-8)))
  (ispell-program-name (executable-find "hunspell"))
  (ispell-really-hunspell t)
  (ispell-silently-savep t)
  :preface
  (defun my/switch-language ()
    "Switches between the English and French language."
    (interactive)
    (let* ((current-dictionary ispell-current-dictionary)
           (new-dictionary (if (string= current-dictionary "fr_BE") "en_US" "fr_BE")))
      (ispell-change-dictionary new-dictionary)
      (if (string= new-dictionary "fr_BE")
          (langtool-switch-default-language "fr")
        (langtool-switch-default-language "en"))

      ;;Clears all these old errors after switching to the new language
      (if (and (boundp 'flyspell-mode) flyspell-mode)
          (flyspell-mode 0)
        (flyspell-mode 1))

    (message "Dictionary switched from %s to %s" current-dictionary new-dictionary))))
#+end_src
**** TODO Grammar Checker
*** Lorem Ipsum
#+begin_src emacs-lisp :tangle yes
  (use-package lorem-ipsum
    :bind (("C-c C-v l" . lorem-ipsum-insert-list)
           ("C-c C-v p" . lorem-ipsum-insert-paragraphs)
           ("C-c C-v s" . lorem-ipsum-insert-sentences)))
#+end_src

** Interface Enhancement
*** Enhanced package manager
Replace the stock package list manager with a more modern one
#+begin_src emacs-lisp :tangle yes
(use-package paradox
  :custom
  (paradox-execute-asynchronously t)
  :config
  (paradox-enable))
#+end_src

*** Which-key
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :defer 0.2
    :config (which-key-mode)
    :bind(
          ("<f5>" . which-key-show-top-level)
          ))
#+end_src

#+RESULTS:
: which-key-show-top-level

*** Ivy Counsel
#+begin_src emacs-lisp :tangle yes
  (use-package ivy-rich
    :init
    (setq ivy-format-function 'ivy-format-function-line)
    :config
    (progn
      (defun ivy-rich-switch-buffer-icon (candidate)
        (with-current-buffer
            (get-buffer candidate)
          (let ((icon (all-the-icons-icon-for-mode major-mode)))
            (if (symbolp icon)
                (all-the-icons-icon-for-mode 'fundamental-mode)
              icon))))
      (setq
       ivy-rich--display-transformers-list
       '(ivy-switch-buffer
         (:columns
          ((ivy-rich-switch-buffer-icon :width 2)
           (ivy-rich-candidate (:width 30))
           (ivy-rich-switch-buffer-size (:width 7))
           (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
           (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
           (ivy-rich-switch-buffer-project (:width 15 :face success))
           (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
          :predicate
          (lambda (cand) (get-buffer cand))))))
    (setq ivy-format-function 'ivy-format-function-line))

  (use-package ivy-rich
    :defines (all-the-icons-icon-alist
              all-the-icons-dir-icon-alist
              bookmark-alist)
    :functions (all-the-icons-icon-for-file
                all-the-icons-icon-for-mode
                all-the-icons-icon-family
                all-the-icons-match-to-alist
                all-the-icons-faicon
                all-the-icons-octicon
                all-the-icons-dir-is-submodule)
    :preface
    (defun ivy-rich-bookmark-name (candidate)
      (car (assoc candidate bookmark-alist)))

    (defun ivy-rich-buffer-icon (candidate)
      "Display buffer icons in `ivy-rich'."
      (when (display-graphic-p)
        (let* ((buffer (get-buffer candidate))
               (buffer-file-name (buffer-file-name buffer))
               (major-mode (buffer-local-value 'major-mode buffer))
               (icon (if (and buffer-file-name
                              (all-the-icons-match-to-alist buffer-file-name
                                                            all-the-icons-icon-alist))
                         (all-the-icons-icon-for-file (file-name-nondirectory buffer-file-name)
                                                      :height 0.9 :v-adjust -0.05)
                       (all-the-icons-icon-for-mode major-mode :height 0.9 :v-adjust -0.05))))
          (if (symbolp icon)
              (setq icon (all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver :height 0.9 :v-adjust -0.05))
            icon))))

    (defun ivy-rich-file-icon (candidate)
      "Display file icons in `ivy-rich'."
      (when (display-graphic-p)
        (let* ((path (concat ivy--directory candidate))
               (file (file-name-nondirectory path))
               (icon (cond ((file-directory-p path)
                            (cond
                             ((and (fboundp 'tramp-tramp-file-p)
                                   (tramp-tramp-file-p default-directory))
                              (all-the-icons-octicon "file-directory" :height 0.93 :v-adjust 0.01))
                             ((file-symlink-p path)
                              (all-the-icons-octicon "file-symlink-directory" :height 0.93 :v-adjust 0.01))
                             ((all-the-icons-dir-is-submodule path)
                              (all-the-icons-octicon "file-submodule" :height 0.93 :v-adjust 0.01))
                             ((file-exists-p (format "%s/.git" path))
                              (all-the-icons-octicon "repo" :height 1.0 :v-adjust -0.01))
                             (t (let ((matcher (all-the-icons-match-to-alist candidate all-the-icons-dir-icon-alist)))
                                  (apply (car matcher) (list (cadr matcher) :height 0.93 :v-adjust 0.01))))))
                           ((string-match "^/.*:$" path)
                            (all-the-icons-material "settings_remote" :height 0.9 :v-adjust -0.2))
                           ((not (string-empty-p file))
                            (all-the-icons-icon-for-file file :height 0.9 :v-adjust -0.05)))))
          (if (symbolp icon)
              (setq icon (all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver :height 0.9 :v-adjust -0.05))
            icon))))
    :hook ((ivy-mode . ivy-rich-mode)
           (ivy-rich-mode . (lambda ()
                              (setq ivy-virtual-abbreviate
                                    (or (and ivy-rich-mode 'abbreviate) 'name)))))
    :init
    ;; For better performance
    (setq ivy-rich-parse-remote-buffer nil)

    (setq ivy-rich-display-transformers-list
          '(ivy-switch-buffer
            (:columns
             ((ivy-rich-buffer-icon)
              (ivy-rich-candidate (:width 30))
              (ivy-rich-switch-buffer-size (:width 7))
              (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
              (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
             :predicate
             (lambda (cand) (get-buffer cand)))
            ivy-switch-buffer-other-window
            (:columns
             ((ivy-rich-buffer-icon)
              (ivy-rich-candidate (:width 30))
              (ivy-rich-switch-buffer-size (:width 7))
              (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
              (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
             :predicate
             (lambda (cand) (get-buffer cand)))
            counsel-switch-buffer
            (:columns
             ((ivy-rich-buffer-icon)
              (ivy-rich-candidate (:width 30))
              (ivy-rich-switch-buffer-size (:width 7))
              (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
              (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
             :predicate
             (lambda (cand) (get-buffer cand)))
            persp-switch-to-buffer
            (:columns
             ((ivy-rich-buffer-icon)
              (ivy-rich-candidate (:width 30))
              (ivy-rich-switch-buffer-size (:width 7))
              (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
              (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
             :predicate
             (lambda (cand) (get-buffer cand)))
            counsel-M-x
            (:columns
             ((counsel-M-x-transformer (:width 50))
              (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
            counsel-describe-function
            (:columns
             ((counsel-describe-function-transformer (:width 50))
              (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
            counsel-describe-variable
            (:columns
             ((counsel-describe-variable-transformer (:width 50))
              (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
            counsel-find-file
            (:columns
             ((ivy-rich-file-icon)
              (ivy-read-file-transformer)))
            counsel-file-jump
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate)))
            counsel-dired
            (:columns
             ((ivy-rich-file-icon)
              (ivy-read-file-transformer)))
            counsel-dired-jump
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate)))
            counsel-git
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate)))
            counsel-recentf
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate (:width 0.8))
              (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))
            counsel-bookmark
            (:columns
             ((ivy-rich-bookmark-type)
              (ivy-rich-bookmark-name (:width 40))
              (ivy-rich-bookmark-info)))
            counsel-projectile-switch-project
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate)))
            counsel-projectile-find-file
            (:columns
             ((ivy-rich-file-icon)
              (counsel-projectile-find-file-transformer)))
            counsel-projectile-find-dir
            (:columns
             ((ivy-rich-file-icon)
              (counsel-projectile-find-dir-transformer)))
            treemacs-projectile
            (:columns
             ((ivy-rich-file-icon)
              (ivy-rich-candidate))))))

  (use-package ivy
    :hook (after-init . ivy-mode)
    :config
    (progn
      (setq ivy-use-virtual-buffers t)
      (setq ivy-initial-inputs-alist nil)
      (counsel-mode)
      (ivy-rich-mode)))

  (use-package counsel
    :after ivy
    :config
    (setq counsel-grep-base-command
          "rg -i -M 120 --no-heading --line-number --color never '%s' %s")
    :bind
    (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ;; ("C-c p f" . counsel-projectile-find-file)
     ;; ("C-c p d" . counsel-projectile-find-dir)
     ;; ("C-c p p" . counsel-projectile-switch-project)
     ("<f1> f" . counsel-describe-function)
     ("<f1> v" . counsel-describe-variable)
     ("<f1> l" . counsel-load-library)
     ("<f2> i" . counsel-info-lookup-symbol)
     ("<f2> u" . counsel-unicode-char)
     ("C-c k" . counsel-rg)
     :map org-mode-map
     ("C-c C-f" . counsel-org-goto)))

  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           :map swiper-map
           ("M-%" . swiper-query-replace)))

  (use-package smex)
#+end_src

#+RESULTS:

**** TODO Password
#+begin_src emacs-lisp :tangle yes
  ;; (use-package ivy-pass
  ;;   :after ivy
  ;;   :commands ivy-pass)
#+end_src

*** Reserch and Replace
#+begin_src emacs-lisp :tangle yes
    (use-package swiper
      :after ivy
      :bind (("C-s" . swiper)
             :map swiper-map
             ("M-%" . swiper-query-replace)))

#+end_src
*** PDF
#+begin_src emacs-lisp :tangle yes
  (use-package pdf-tools
    :defer 1
    :magic ("%PDF" . pdf-view-mode)
    :init (pdf-tools-install :no-query)
    :config
    (setq-default pdf-view-display-size 'fit-page)
    (bind-keys :map pdf-view-mode-map
               ("\\" . hydra-pdftools/body)
               ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
               ("g"  . pdf-view-first-page)
               ("G"  . pdf-view-last-page)
               ("l"  . image-forward-hscroll)
               ("h"  . image-backward-hscroll)
               ("j"  . pdf-view-next-page)
               ("k"  . pdf-view-previous-page)
               ("e"  . pdf-view-goto-page)
               ("u"  . pdf-view-revert-buffer)
               ("al" . pdf-annot-list-annotations)
               ("ad" . pdf-annot-delete)
               ("aa" . pdf-annot-attachment-dired)
               ("am" . pdf-annot-add-markup-annotation)
               ("at" . pdf-annot-add-text-annotation)
               ("y"  . pdf-view-kill-ring-save)
               ("i"  . pdf-misc-display-metadata)
               ("s"  . pdf-occur)
               ("b"  . pdf-view-set-slice-from-bounding-box)
               ("r"  . pdf-view-reset-slice)))

  (use-package pdf-view
    :ensure nil
    :after pdf-tools
    :bind (:map pdf-view-mode-map
                ("C-s" . isearch-forward)
                ("d" . pdf-annot-delete)
                ("h" . pdf-annot-add-highlight-markup-annotation)
                ("t" . pdf-annot-add-text-annotation))
    :custom
    (pdf-view-display-size 'fit-page)
    (pdf-view-resize-factor 1.1)
    (pdf-view-use-unicode-ligther nil))
#+end_src

*** Treemacs
#+begin_src emacs-lisp :tangle yes
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  ;; (use-package treemacs-magit
  ;;   :after treemacs magit
  ;;   :ensure t)
#+end_src

#+RESULTS:
: t

*** Close all buffers
#+begin_src emacs-lisp :tangle yes
  (defun close-all-buffers ()
    "Kill all buffers without regard for their origin."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+end_src

*** Popup-kill-ring
#+begin_src emacs-lisp :tangle yes
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src

** Projects
*** Projectile

#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :defer 1
    :preface
    (defun my/projectile-compilation-buffers (&optional project)
      "Get a list of a project's compilation buffers.
    If PROJECT is not specified the command acts on the current project."
      (let* ((project-root (or project (projectile-project-root)))
             (buffer-list (mapcar #'process-buffer compilation-in-progress))
             (all-buffers (cl-remove-if-not
                           (lambda (buffer)
                             (projectile-project-buffer-p buffer project-root))
                           buffer-list)))
        (if projectile-buffers-filter-function
            (funcall projectile-buffers-filter-function all-buffers)
          all-buffers)))
    :custom
    (projectile-completion-system 'ivy)
    (projectile-enable-caching t)
    (projectile-keymap-prefix (kbd "C-c C-p"))
    (projectile-mode-line '(:eval (projectile-project-name)))
    :config (projectile-global-mode))

  (use-package counsel-projectile
    :after (counsel projectile)
    :config (counsel-projectile-mode 1))
#+end_src

*** Version Control
**** TODO Magit
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :defer 0.3
    :bind(("C-x g". magit-status)))
#+end_src

#+RESULTS:
: magit-status

**** TODO Git-commit
Must look whether i'm gonna used this or not
#+begin_src emacs-lisp :tangle yes
  ;; (use-package git-commit
  ;;   :after magit
  ;;   :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
  ;;   :custom (git-commit-summary-max-length 50)
  ;;   :preface
  ;;   (defun my/git-commit-auto-fill-everywhere ()
  ;;     "Ensures that the commit body does not exceed 72 characters."
  ;;     (setq fill-column 72)
  ;;     (setq-local comment-auto-fill-only-comments nil)))
#+end_src

**** TODO Smerge-mode
Help in resolving merge conflicts
#+begin_src emacs-lisp :tangle yes
(use-package smerge-mode
    :after hydra
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode
                                       (hydra-merge/body)))))
#+end_src

**** Git-gutter
Show add, modification, delete on the side of a versioned file
#+begin_src emacs-lisp :tangle yes
 (use-package git-gutter
    :defer 0.3
    :init (global-git-gutter-mode ))
#+end_src

**** Git-timemachine
#+begin_src emacs-lisp :tangle yes
  (use-package git-timemachine
    :defer 1)
#+end_src

** File Manager
*** Ranger
[[https://github.com/ralesi/ranger.el][Ranger]]
This is a minor mode that runs within dired, it emulates many
of ranger's features
#+begin_src emacs-lisp :tangle yes
  (use-package ranger
    :bind ("C-c b" . ranger)
    :custom
    (ranger-preview-file 1))
#+end_src

 * Programming languages
** General programming settings
*** EditorConfig
#+begin_src emacs-lisp :tangle yes
(use-package editorconfig
  :defer 0.3
  :config (editorconfig-mode 1))
#+end_src

*** Aggressive-indent
#+begin_src emacs-lisp :tangle yes
  (use-package aggressive-indent
    :hook ((css-mode . aggressive-indent-mode)
           (emacs-lisp-mode . aggressive-indent-mode)
           (js-mode . aggressive-indent-mode)
           (lisp-mode . aggressive-indent-mode))
    :custom (aggressive-indent-comments-too))
#+end_src

*** Electric-operator
Add some spaces around operators
#+begin_quote
Note that electric-operator-mode is not a global minor mode. It must be enabled
separately for each major mode that you wish to use it with.
#+end_quote

#+begin_src emacs-lisp :tangle yes
  (use-package electric-operator
    :hook
    (python-mode . electric-operator-mode)
    (c-mode . electric-operator-mode)
    :config (electric-operator-mode 1))
#+end_src

*** Rainbow-mode
Colorize colors as text with their value.
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-mode
    :hook (prog-mode))
#+end_src

*** Whitespaces deletion
#+begin_src emacs-lisp :tangle yes
  (use-package simple
    :ensure nil
    :hook (before-save . delete-trailing-whitespace))
#+end_src

*** Hungry-delete
#+begin_src emacs-lisp :tangle yes
  (use-package hungry-delete
    :defer 0.7
    :config (global-hungry-delete-mode))
#+end_src
*** Kill buffer without confirmation
#+begin_src emacs-lisp :tangle yes
(global-set-key [remap kill-buffer] #'kill-this-buffer)
#+end_src

** Specific mode settings
*** Python
#+begin_src emacs-lisp :tangle yes
  (setq py-python-command "python3")
  (setq python-shell-interpreter "python3")

  (use-package elpy
    :ensure t
    :custom (elpy-rpc-backend "jedi")
    :config
    (advice-add 'python-mode :before 'elpy-enable))

  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))

#+end_src

#+RESULTS:
: t

*** TODO RestClient-mode

*** Markdown
#+begin_src emacs-lisp :tangle yes
  (use-package flymd)
#+end_src

*** X Mod Map Mode
#+begin_src emacs-lisp :tangle yes
  (define-generic-mode 'xmodmap-mode
    '(?!)
    '("add" "clear" "keycode" "keysym" "pointer" "remove")
    nil
    '("[xX]modmap\\(rc\\)?\\'")
    nil
    "Simple mode for xmodmap files.")
#+end_src

*** TODO LaTeX
#+begin_src emacs-lisp :tangle yes
  (use-package tex
    :ensure auctex
    :bind (:map TeX-mode-map
                ("C-c C-o" . TeX-recenter-output-buffer)
                ("C-c C-l" . TeX-next-error)
                ("M-[" . outline-previous-heading)
                ("M-]" . outline-next-heading))
    :hook (LaTeX-mode . reftex-mode)
    :preface
    (defun my/switch-to-help-window (&optional ARG REPARSE)
      "Switches to the *TeX Help* buffer after compilation."
      (other-window 1))
    :custom
    (TeX-auto-save t)
    (TeX-byte-compile t)
    (TeX-clean-confirm nil)
    (TeX-master 'dwim)
    (TeX-parse-self t)
    (TeX-PDF-mode t)
    (TeX-source-correlate-mode t)
    (TeX-view-program-selection '((output-pdf "PDF Tools")))
    :config
    (advice-add 'TeX-next-error :after #'my/switch-to-help-window)
    (advice-add 'TeX-recenter-output-buffer :after #'my/switch-to-help-window)
    ;; the ":hook" doesn't work for this one... don't ask me why.
    (add-hook 'TeX-after-compilation-finished-functions 'TeX-revert-document-buffer))

  (use-package bibtex
    :after auctex
    :hook (bibtex-mode . my/bibtex-fill-column)
    :preface
    (defun my/bibtex-fill-column ()
      "Ensures that each entry does not exceed 120 characters."
      (setq fill-column 120)))

  (use-package company-auctex
    :after (auctex company)
    :config (company-auctex-init))

  (use-package company-math :after (auctex company))

  (setq-default TeX-engine 'xetex)

  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list
                  '("XeLaTeX" "xelatex --shell-escape  -interaction=nonstopmode %s"
                    TeX-run-command t t :help "Run xelatex") t))
#+end_src

#+RESULTS:

** Web-mode
#+begin_src emacs-lisp :tangle yes
(use-package web-mode
  :mode "\\.phtml\\'"
  :mode "\\.volt\\'"
  :mode "\\.html\\'"
  :mode "\\.svelte\\'"
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2))
#+end_src

** TODO Linters
** Snippets
*** YASnippet
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet-snippets
    :after yasnippet
    :config (yasnippet-snippets-initialize))

  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

  (use-package ivy-yasnippet :after yasnippet)
  (use-package react-snippets :after yasnippet)

  ;; used for creating local snippets or persistant snippets
  (use-package auto-yasnippet )
#+end_src

* Org-Mode
** Org better defaults
Edit the code blocks in the same window
#+begin_src emacs-lisp :tangle yes
  (setq org-src-window-setup 'current-window)
  (setq org-startup-folded nil)
#+end_src

#+RESULTS:

** Org-Mode appearance
*** Toc-org
#+begin_src emacs-lisp :tangle yes
  (use-package toc-org
    :config
    (toc-org-mode t))
#+end_src

*** Bullets
#+begin_src emacs-lisp :tangle yes
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+end_src

** To refile
#+begin_src emacs-lisp :tangle yes
(setq org-refile-targets '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5)))
#+end_src
** Export
*** Latex
Make sure you got the Pygment python package installed (using pip or your
package-manage)
#+begin_src emacs-lisp :tangle yes
  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted")))

  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode %f"
          "xelatex -shell-escape -interaction nonstopmode %f")) ;; for multiple passes

#+end_src

#+RESULTS:
| xelatex -shell-escape -interaction nonstopmode %f | xelatex -shell-escape -interaction nonstopmode %f |

** Language compilation
#+begin_src emacs-lisp :tangle yes
  (use-package ob-C :ensure nil :after org)
  (use-package ob-css :ensure nil :after org)
  (use-package ob-ditaa :ensure nil :after org)
  (use-package ob-dot :ensure nil :after org)
  (use-package ob-emacs-lisp :ensure nil :after org)
  (use-package ob-gnuplot :ensure nil :after org)
  (use-package ob-java :ensure nil :after org)
  (use-package ob-js :ensure nil :after org)

  (use-package ob-latex
    :ensure nil
    :after org
    :custom (org-latex-compiler "xelatex"))

  (use-package ob-ledger :ensure nil :after org)
  (use-package ob-makefile :ensure nil :after org)
  (use-package ob-org :ensure nil :after org)

  (use-package ob-python :ensure nil :after org)
  (use-package ob-ruby :ensure nil :after org)
  (use-package ob-shell :ensure nil :after org)
  (use-package ob-sql :ensure nil :after org)
#+end_src

* Advanced configurations
** Alert

Most packages use =alerts= to make notifications with =libnotify=. Don't forget
to first install a notification daemon, like =dunst=.

#+BEGIN_QUOTE
Alert is a Growl-workalike for Emacs which uses a common notification interface
and multiple, selectable "styles", whose use is fully customizable by the user.

[[https://github.com/jwiegley/alert][John Wiegley]]
#+END_QUOTE

#+begin_src emacs-lisp :tangle yes
  (use-package alert
    :defer 1
    :custom (alert-default-style 'libnotify))
#+end_src

** Auto-Completion
As a completion package, i'm using company with several other packages to rice it.
*** Company
#+begin_src emacs-lisp :tangle yes
  (use-package company
    :diminish company-mode
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-minimum-prefix-length 2)
    (setq company-dabbrev-downcase nil)
    (setq company-begin-commands '(self-insert-command))
    (setq company-idle-delay .1)
    (setq company-minimum-prefix-length 2)
    (setq company-show-numbers t)
    (setq company-tooltip-align-annotations 't)
    (bind-keys :map company-active-map
               ("C-d" . company-show-doc-buffer)
               ("C-l" . company-show-location)
               ("C-n" . company-select-next)
               ("C-p" . company-select-previous)
               ("ESC" . company-abort)
               ("TAB" . company-complete))
    :bind("M-TAB" . company-complete))
#+end_src

*** Company-go
#+begin_quote
Completion will start automatically whenever the current symbol is preceded by a ., or after you type company-minimum-prefix-length letters.
#+end_quote
#+begin_src emacs-lisp :tangle yes
(use-package company-go)
#+end_src

#+RESULTS:

*** Company-box
#+begin_quote
A company front-end with icons.
#+end_quote
#+begin_src emacs-lisp :tangle yes
(use-package company-box
    :after company
    :hook (company-mode . company-box-mode))
#+end_src

#+RESULTS:
| company-box-mode | company-mode-set-explicitly |

** External Launch
*** Browser
**** Default launcher
#+begin_src emacs-lisp :tangle yes
  (use-package browse-url
    :ensure nil
    :custom
    (browse-url-browser-function 'browse-url-generic)
    (browse-url-generic-program "qutebrowser"))
#+end_src

**** Launch specific search from emacs
#+begin_src emacs-lisp :tangle yes
  (use-package engine-mode
    :defer 3
    :config
    (defengine amazon
      "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s"
      :keybinding "a")

    (defengine duckduckgo
      "https://duckduckgo.com/?q=%s"
      :keybinding "d")

    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s"
      :keybinding "g")

    (defengine google-images
      "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
      :keybinding "i")

    (defengine google-maps
      "http://maps.google.com/maps?q=%s"
      :keybinding "m"
      :docstring "Mappin' it up.")

    (defengine stack-overflow
      "https://stackoverflow.com/search?q=%s"
      :keybinding "s")

    (defengine youtube
      "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
      :keybinding "y")

    (defengine wikipedia
      "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
      :keybinding "w"
      :docstring "Searchin' the wikis.")
    (engine-mode t))
#+end_src

** Buffer
*** Ibuffer
#+begin_src emacs-lisp :tangle yes
  (use-package ibuffer
      :bind ("C-x C-b" . ibuffer))
  (use-package ibuffer-vc
    :after ibuffer)
  (use-package ibuffer-git
    :after ibuffer)
#+end_src

#+RESULTS:
*** Protection against deletion

#+begin_src emacs-lisp :tangle yes
  (when (get-buffer "*scratch*")
  (with-current-buffer "*scratch*"
	    (emacs-lock-mode 'kill)))

  (when (get-buffer "*dashboard*")
  (with-current-buffer "*dashboard*"
	    (emacs-lock-mode 'kill)))

  (when (get-buffer "*Backtrace*")
  (with-current-buffer "*Backtrace*"
	    (emacs-lock-mode 'kill)))

  (when (get-buffer "*Messages*")
  (with-current-buffer "*Messages*"
	    (emacs-lock-mode 'kill)))
#+end_src
#+RESULTS:
: kill
** Calculator
Adding some usefull unit calculation
#+begin_src emacs-lisp :tangle yes
  (use-package calc
    :defer t
    :custom
    (math-additional-units
     '((GiB "1024 * MiB" "Giga Byte")
       (MiB "1024 * KiB" "Mega Byte")
       (KiB "1024 * B" "Kilo Byte")
       (B nil "Byte")
       (Gib "1024 * Mib" "Giga Bit")
       (Mib "1024 * Kib" "Mega Bit")
       (Kib "1024 * b" "Kilo Bit")
       (b "B / 8" "Bit")))
    (math-units-table nil))
#+end_src

** Dashboard
#+begin_src emacs-lisp :tangle yes
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))

  (setq dashboard-startup-banner "~/.emacs.d/assert/img/dashLogo.png")

  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  (setq dashboard-set-footer nil)

  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5)))
#+end_src

** Dired
*** Enhancement
#+begin_src emacs-lisp :tangle yes
(eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+end_src
*** dired-subtree
#+begin_src emacs-lisp :tangle yes
(use-package dired-subtree :ensure t
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
#+end_src

#+RESULTS:
: t

*** TODO customise dired
** History
#+begin_src emacs-lisp :tangle yes
  (use-package savehist
    :ensure nil
    :custom
    (history-delete-duplicates t)
    ;; (savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
    (savehist-save-minibuffer-history 1)
    :config (savehist-mode 1))
#+end_src
** Hydra
Since it's quite difficult to remember all the shortcuts. Hydra gives you the opportunity to configure control panels from which you can run some commands.
*** Hydra use-package
#+begin_src emacs-lisp :tangle yes
  (use-package hydra)

  (use-package major-mode-hydra
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust)
      "Displays an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

    (defun with-faicon (icon str &optional height v-adjust)
      "Displays an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

    (defun with-fileicon (icon str &optional height v-adjust)
      "Displays an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

    (defun with-octicon (icon str &optional height v-adjust)
      "Displays an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str)))
#+end_src
*** hydra-Launcher
#+begin_src emacs-lisp :tangle yes
  ;; (pretty-hydra-define hydra-launcher
  ;;   (:hint nil :color teal :quit-key "q" :title (with-faicon "clock-o" "Clock" 1 -0.05))
  ;;   ("Action"
  ;;    (("g" hydra-general/body "hydra general")))))

  ;; (pretty-hydra-define hydra-general
  ;;   (:hint nil :color amaranth :quit-key "q" :title (with-faicon "toggle-on" "Toggle" 1 -0.05))
  ;;   ("Create"
  ;;    (("s" generate-scratch-buffer "generate scratch buffer" ))
  ;;    "Coding"
  ;;    (("e" electric-operator-mode "electric operator" :toggle t)
  ;;     ("F" flyspell-mode "flyspell" :toggle t)
  ;;     ("l" lsp-mode "lsp" :toggle t))
  ;;    "UI"
  ;;    (("t" treemacs  "Treemacs" :toggle t))))

#+end_src

** Draw graphics
*** Gnuplot

#+begin_src emacs-lisp :tangle yes
  (use-package gnuplot
    :ensure-system-package gnuplot
    :defer 2)

  (use-package gnuplot-mode
    :after gnuplot
    :mode "\\.gp\\'")
#+end_src

** Try
#+begin_src emacs-lisp :tangle yes
  (use-package try :defer 5)
#+end_src

** Undo-tree
#+begin_src emacs-lisp :tangle yes
  (use-package undo-tree
    :bind ("C--" . undo-tree-redo)
    :init (global-undo-tree-mode)
    :custom
    (undo-tree-visualizer-timestamps t)
    (undo-tree-visualizer-diff t))
#+end_src

** Wiki-summary
*** =wiki-summary=

#+begin_src emacs-lisp :tangle yes
  (use-package wiki-summary
    :defer 1
    :preface
    (defun my/format-summary-in-buffer (summary)
      "Given a summary, sticks it in the *wiki-summary* buffer and displays
       the buffer."
      (let ((buf (generate-new-buffer "*wiki-summary*")))
        (with-current-buffer buf
          (princ summary buf)
          (fill-paragraph)
          (goto-char (point-min))
          (view-mode))
        (pop-to-buffer buf))))

  (advice-add 'wiki-summary/format-summary-in-buffer :override #'my/format-summary-in-buffer)
#+end_src
** TODO IRC
** Recent Files
#+begin_src emacs-lisp :tangle yes
  (use-package recentf
    :bind ("C-c r" . recentf-open-files)
    :init (recentf-mode)
    :custom
    (recentf-exclude (list "COMMIT_EDITMSG"
                           "~$"
                           "/scp:"
                           "/ssh:"
                           "/sudo:"
                           "/tmp/"))
    (recentf-max-menu-items 15)
    (recentf-max-saved-items 200)
    :config (run-at-time nil (* 5 60) 'recentf-save-list))
#+end_src

** Reveal.js
#+begin_src emacs-lisp :tangle yes
  (use-package org-re-reveal
    :after org
    :custom
    (org-reveal-mathjax t)
    (org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/"))
#+end_src
** Utility functions
*** Generate scratch buffer
#+begin_src emacs-lisp :tangle yes
  (defun generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
       name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))
  (global-set-key (kbd "H-s") 'generate-scratch-buffer)
#+end_src

*** Open all marked files in Dired
#+begin_src emacs-lisp :tangle yes
(eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+end_src
*** Copy file name
#+begin_src emacs-lisp :tangle yes
(defun copy-filename ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+end_src
*** Get current public ip
#+begin_src emacs-lisp :tangle yes
(defun what-is-my-ip ()
  (interactive)
  (message "IP: %s"
           (with-current-buffer (url-retrieve-synchronously "https://api.ipify.org")
             (buffer-substring (+ 1 url-http-end-of-headers) (point-max)))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(global-set-key
 (kbd "M-o")
 (defhydra hydra-window()
   "window"
   ("h" windmove-left)
   ("j" windmove-down)
   ("k" windmove-up)
   ("l" windmove-right)
   ("x" (lambda ()
	  (interactive)
	  (split-window-right)
	  (windmove-right))
    "vertical")
   ("v" (lambda ()
	  (interactive)
	  (split-window-below)
	  (windmove-down))
    "horizontal")
   ("t" transpose-frame "'")
   ;; ("o" delete-window "one" :color blue)
   ("D" delete-other-windows "one" :color blue)
   ;; ("o" delete-windows-on "one" :color blue)
   ("g" ace-window "go to")
   ("s" ace-swap-window "swap")
   ("d" (lambda ()
	  (interactive)
	  (delete-window)
	  ;; (hydra-window))
	  )
    "del")
   ("i" ace-maximize-window "maximise hint" :color blue)
   ("b" ido-switch-buffer "buffer")
   ;; ("m" headlong-bookmark-jump "bmk")
   ("q" nil "cancel")))
#+end_src
*** Move files
#+begin_src emacs-lisp :tangle yes
(defun move-file ()
  "Write this file to a new location, and delete the old one."
  (interactive)
  (let ((old-location (buffer-file-name)))
    (call-interactively #'write-file)
    (when old-location
      (delete-file old-location))))
#+end_src
*** Format long function parameter list into multiline
#+begin_src emacs-lisp :tangle yes
(defun format-function-parameters ()
  "Turn the list of function parameters into multiline."
  (interactive)
  (beginning-of-line)
  (search-forward "(" (line-end-position))
  (newline-and-indent)
  (while (search-forward "," (line-end-position) t)
    (newline-and-indent))
  (end-of-line)
  (c-hungry-delete-forward)
  (insert " ")
  (search-backward ")")
  (newline-and-indent))
#+end_src
*** Reload configuration
#+begin_src emacs-lisp :tangle yes
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+end_src
